!STILL TO DO:
!ONLY NEED POTENTIAL HAMILTONIAN ONCE


PROGRAM GRAPHENE_BANDS
	IMPLICIT NONE
	
	REAL(8) :: a0 = 1.42, AngBohr = 0.529177 !angstroms per Bohr Radius and primitive lattice vector for graphene in angstroms
	REAL(8) :: Pi, T, V, L, ZLength, ev, MaxZEnergy, MaxParaEnergy, ParaEnergy, ZEnergy, GSquare, kz, Area, Volume, kD
	REAL(8), DIMENSION(3) :: a1, a2, b1, b2, d, G, kparallel, kO, kDel
	REAL(8), DIMENSION(3) :: Gam, K, MSpatial, KK, cross !Spatial K Points that the bandgap is calculated along.
	INTEGER :: n, m, p, ParaCntr, ZCntr, MatrixDimension, minVec, i, q !Integers used for loops and storage 
	INTEGER, DIMENSION(:,:), allocatable :: nmAllow	
	REAL(8), DIMENSION(:,:), allocatable :: HMatrix

	REAL(8), PARAMETER :: hbar = 1.0, eMass = 1.0 !allows for the units to be converted with relative ease
	
	ev = 27.2114 !Hartrees in an electronvolt
	Pi = 4.0 * atan(1.0)
	a0 = a0 / AngBohr	
	kD = 0
	
	!Define real space lattice vectors of graphene
	a1(1) = (a0 * sqrt(3.0)) / 2.0
	a1(2) = (a0 * 3.0) / 2.0
	a1(3) = 0.0

	a2(1) = -(a0 * sqrt(3.0)) / 2.0
	a2(2) = (a0 * 3.0) / 2.0
	a2(3) = 0.0


	d(1) = 0.0
	d(2) = a0
	d(3) = 0.0

	!define reciprocal lattice space vectors of graphene
	b1(1) = (2.0 * Pi) / (sqrt(3.0)*a0)
	b1(2) = (2.0 * Pi) / (3.0 * a0)
	b1(3) = 0.0
	
	b2(1) = -(2.0 * Pi) / (sqrt(3.0) * a0) 
	b2(2) = (2.0 * Pi) / (3.0 * a0)
	b2(3) = 0.0

	!define special K Points
	Gam(1) = 0.0
	Gam(2) = 0.0
	Gam(3) = 0.0

	K(1) = 2.0 * Pi/(3.0 * sqrt(3.0) * a0)
	K(2) = 2.0 * Pi/(3 * a0)
	K(3) = 0.0
	
	MSpatial(1) = Pi/(sqrt(3.0) * 2 * a0)
	MSpatial(2) = Pi/(3 * a0)
	MSpatial(3) = 0.0

	KK(1) = 4.0 * Pi/(3 * sqrt(3.0) * a0)
	KK(2) = 0.0
	KK(3) = 0.0

	!cross product of reciprocal lattice vectors
	cross(1) = b1(2) * b2(3) - b1(3) * b2(2)
	cross(2) = b1(3) * b2(1) - b1(1) * b2(3)
	cross(3) = b1(1) * b2(2) - b1(2) * b2(1)	
	!Magnitude of the cross product gives the area
	Area = abs(a1(1)*a2(2)-a2(1)*a1(2))
!    write(*,*)Area,sqrt(a1(1)**2+a1(2)**2),sqrt(a2(1)**2+a2(2)**2)

	!user input to define cutoff energies & zlength
	print *, "Input Max Z Energy in Hartrees: "
	read *, MaxZEnergy

	print *, "Input Max Parallel Energy in Hartrees: "
	read *, MaxParaEnergy

	print *, "Input Z Length in units of Angstroms: "
	read *, ZLength

	ZLength = ZLength / AngBohr	!convert zlength to Bohr radii
	Volume = ZLength * Area

	ParaCntr = 0
	ParaEnergy = 0.0
	ZEnergy = 0.0
	ZCntr = 0	!stores the number of discrete Z Energies for the given length and Energy cutoff
	GSquare = 0.0
	do while (ZEnergy < MaxZEnergy)

		kz = (ZCntr + 1) * Pi / ZLength
		ZEnergy = (hbar**2.0)/(2.0 * eMass) * kz**2.0

		if (ZEnergy < MaxZEnergy) then
			ZCntr = ZCntr + 1
		end if
	end do

	minVec = 0

	do while (ParaEnergy <= MaxParaEnergy)
		minVec = minVec + 1
		G = minVec * b1
		GSquare = dot_product(G, G)
		ParaEnergy = (GSquare * hbar**2)/(2 * eMass)
	end do

	m = -minVec
	n = -minVec
	ParaEnergy = 0

!determines allowed parallel vectors to find the matrix dimensions
	do while (m <= minVec)
		do while (n <= minVec)
			
			G = n * b1 + m * b2
			GSquare = dot_product(G, G)
			ParaEnergy = (GSquare * hbar**2)/(2 * eMass)
			if (ParaEnergy <= MaxParaEnergy) then			
				ParaCntr = ParaCntr + 1
				!print *, m, n, GSquare
			end if
				n = n + 1
		end do
		
		m = m + 1
		n = 0
		G = n * b1 + m * b2
		GSquare = dot_product(G, G)

		ParaEnergy = (GSquare * hbar**2)/(2 * eMass)
	
		if(ParaEnergy > MaxParaEnergy .AND. m < 0) then
			ParaEnergy = 0
		end if
		n = -minVec - 1
	end do


	MatrixDimension = ParaCntr * ZCntr
	allocate(nmAllow(ParaCntr, 2))


	
	m = -minVec 
	n = -minVec 
	ParaEnergy = 0
	i = 1

	!fills nmAllow with allowed values of m & n
	do while (m <= minVec)
		do while (n <= minVec)
			
			G = n * b1 + m * b2
			GSquare = dot_product(G, G)
			ParaEnergy = (GSquare * hbar**2)/(2 * eMass)
			if (ParaEnergy <= MaxParaEnergy) then			
				nmAllow(i, 1) = n
				nmAllow(i, 2) = m
				i = i + 1
			end if
				n = n + 1
		end do
		
		m = m + 1
		n = 0
		G = n * b1 + m * b2
		GSquare = dot_product(G, G)

		ParaEnergy = (GSquare * hbar**2)/(2 * eMass)
	
		if(ParaEnergy > MaxParaEnergy .AND. m < 0) then
			ParaEnergy = 0
		end if
		n = -minVec
	end do
	!print *, ParaCntr, ZCntr !used for a check
	open(unit = 1, file = 'Eigen.txt')
	!write(1, fmt = "(A)", advance = 'no'), " k             Eigenvalues"
	!write(1, fmt = "(F10.5)", advance = 'no'), kD
	!write(1, fmt = "(A)"), ""
	kO = KK

	allocate(HMatrix(MatrixDimension, MatrixDimension))
	call potential_fill(MatrixDimension, nmAllow, b1, b2,HMatrix, ZLength, Volume, ZCntr, ParaCntr, a0)

	!do i = 0, 20
		!kparallel = KK + (i * (Gam - KK)/ 20)
		!kDel = kparallel - kO
	!	kD = kD + sqrt(dot_product(kDel, kDel))	
	!	kO = kparallel
	!	call get_bands(kparallel, MatrixDimension, ZCntr, ZLength, a0, &
	! 	b1, b2, eMass, hbar, nmAllow, ParaCntr, kD, HMatrix)
	!	write(*,*) i
	!end do

	do i = 0, 20
		kparallel = Gam + (i * (K - Gam)/ 20)
		kDel = kparallel - kO
		kD = kD + sqrt(dot_product(kDel, kDel))	
		kO = kparallel
		call get_bands(kparallel, MatrixDimension, ZCntr, ZLength, a0, &
	 	b1, b2, eMass, hbar, nmAllow, ParaCntr, kD, HMatrix)
		write(*,*) i
	end do

	do i = 0, 10
		kparallel = K + (i * (MSpatial - K)/ 10)
		kDel = kparallel - kO
		kD = kD + sqrt(dot_product(kDel, kDel))	
		kO = kparallel
		call get_bands(kparallel, MatrixDimension, ZCntr, ZLength, a0, &
	 	b1, b2, eMass, hbar, nmAllow, ParaCntr, kD, HMatrix)
		write(*,*) i
	end do

	!do i = 0, 10
	!	kparallel = M + (i * (KK - M)/ 10)
	!	kDel = kparallel - kO
	!	kD = kD + sqrt(dot_product(kDel, kDel))	
	!	kO = kparallel
	!	call get_bands(kparallel, MatrixDimension, ZCntr, ZLength, a0, &
	! 	b1, b2, eMass, hbar, nmAllow, ParaCntr, kD, HMatrix)
	!end do

	close(1) 


END PROGRAM GRAPHENE_BANDS



!Have this subroutine write the matrix to a file
SUBROUTINE get_bands(kparallel,MatrixDimension,ZCntr,ZLength,a0,b1,b2,eMass,hbar,nmAllow,ParaCntr,kD, HMatrix)!This is too long for any more variables
	IMPLICIT NONE
	REAL(8), DIMENSION(MatrixDimension,MatrixDimension), INTENT(IN) :: HMatrix !Matrix of Hamiltonians
	REAL(8), DIMENSION(3) :: G
	INTEGER :: i, j, l, h, m, n, ierr, sig1, sig2, z, ParaCntr
	REAL(8) :: Pi, kz, ParaEnergy, GSquare
	INTEGER, INTENT(IN) :: MatrixDimension, ZCntr
	REAL(8), INTENT(IN) :: ZLength, a0, hbar, eMass, kD
	REAL(8), DIMENSION(3), INTENT(IN) :: kparallel, b1, b2
	INTEGER ,DIMENSION(ParaCntr,2), INTENT(IN) :: nmAllow
	REAL(8), DIMENSION(MatrixDimension, MatrixDimension) :: JMatrix
	REAL(8) :: Struct, VQ
    REAL(8), allocatable :: rd(:),re(:),rz(:,:)
	Pi = 4 * atan(1.0)

	allocate(rd(MatrixDimension), re(MatrixDimension), rz(MatrixDimension, MatrixDimension))

	
	i = 1
	!clears JMatrix
	do n = 1, MatrixDimension
		JMatrix(n,n) = 0
	end do	
	!write (*,*)JMatrix(i,i)
	do n = 1, ParaCntr
		G = nmallow(n,1) * b1 + nmallow(n,2) * b2
		!GSquare = dot_product(G, G)	
		!ParaEnergy = (GSquare * hbar**2)/(2 * eMass)
		do z = 1, ZCntr
			kz = z * Pi / ZLength
			JMatrix(i, i) = HMatrix(i, i) + ((dot_product(kparallel + G, kparallel + G) + kz**2)/2)
			write(*,*)JMatrix(i,i) - hMatrix(i,i)		
			i = i + 1	
		end do
					
	end do
	
     !write(*,*)i,MatrixDimension
	call TRED2(MatrixDimension, MatrixDimension, JMatrix, rd, re, rz)
	call TQL2(MatrixDimension, MatrixDimension, rd, re, rz, ierr)
	if(ierr.ne.0)then
		write(*,*)' ierr= ', ierr
		stop ' eigenvalue calculation'
	endif
	
!	call quicksort(rd, 1, MatrixDimension)

!    write(1,'(1p21e14.5)')kD,(rd(i),i=1,min(20,MatrixDimension))
!	write(1, fmt = "(A)", advance = 'no'), " k             Eigenvalues"
	!write(1, fmt = "(F10.5)", advance = 'no'), kD
	!write(1, fmt = "(A)"), ""
 	do i = 1, 20
 		write(1,'(1p2e14.5)')kD,rd(i)
		!write(1, fmt = "(A)", advance = 'no'), "     "	
!		write(1, '(1pe14.5)', advance = 'no'), rd(i)	
!		write(1, fmt = "(A)"), ""
		!write(1, fmt = "(A)", advance = 'no'), ", "
		!print *, rd(i)
 	end do
	!write(1, fmt = "(A)"), " "
	deallocate(rd, rz, re)
END SUBROUTINE get_bands

SUBROUTINE potential_fill(MatrixDimension, nmAllow, b1, b2, HMatrix, ZLength, Vol, ZCntr, ParaCntr, a0)
	INTEGER, INTENT(IN) :: ZCntr, ParaCntr	
	REAL(8), DIMENSION(MatrixDimension, MatrixDimension), INTENT(OUT) :: HMatrix
	INTEGER, DIMENSION(ParaCntr, 2), INTENT(IN) :: nmAllow
	REAL(8), DIMENSION(3), INTENT(IN) :: b1, b2
	REAL(8), INTENT(IN) :: Vol, ZLength, a0
	REAL(8) :: nConst
	REAL(8), DIMENSION (3) :: GMu, GNU, kzmu, kznu, delGSig, delG, vecd
	INTEGER :: h, i, j, l, sig1, sig2, z, zouter, it
	REAL(8) :: VQ, Pi, dGz
	COMPLEX(8) :: Struct, sf
	REAL(8) :: omegaBulk
	omegaBulk = ((3.57/0.529177)**3)/4!a0 is the angBohr conversion
	Pi = 4 * atan(1.0)	

	vecd(1) = 0.0
	vecd(2) = a0
	vecd(3) = 0.0

	kznu = 0
	h = 1
    !finds the potential for the [i,j] matrix element
	i = 1
	j = 1
	do while (i <= MatrixDimension)
		GNu = nmAllow(h, 1) * b1 + nmAllow(h, 2) * b2
		do zouter = 1, ZCntr
			l = 1
			kznu(3) = zOuter * (Pi/ZLength)
			j = 1
			do while (j <= MatrixDimension)
				GMu = nmAllow(l, 1) * b1 + nmAllow(l, 2) * b2
				do z = 1, ZCntr
					delG = GNu - GMu
					delGSig = 0
					kzmu(3) = z * Pi / ZLength
					do sig1 = -1, 1,2 !steps by 2
						do sig2 = -1, 1,2
							dGz = sig1*kznu(3) - sig2*kzmu(3)
							nConst = (sig1 * sig2)/(2 * Vol)
							sf = 0.0
							do it =-1,1,2
								sf = sf + exp((0,1)*(it*(delG(1)*vecd(1)+delG(2)*vecd(2))+(dGz*ZLength/2)))
							end do
							!write(*,*)dble(sf)
							delGSig = delG + (sig1 * kznu) - (sig2 * kzmu) !Check that kznu & kzmu are the correct way round
							HMatrix(i, j) = HMatrix(i, j) + dble((50*nConst * (omegaBulk * VQ(delGsig) * sf)))
							!write(*,*) sf, VQ(delGSig)
						end do
					end do
					!write(*,*) HMatrix(i,j)
					j = j + 1
				end do
				l = l + 1
			end do
		i = i + 1
		end do
		h = h + 1
		!write(*,*) Paracntr, h
	end do

!do i = 1, MAtrixDimension
	!write(*,*) HMatrix(1,i)
!end do
END SUBROUTINE potential_fill


REAL(8) FUNCTION VQ(k)
	IMPLICIT NONE
	REAL(8), DIMENSION(3), INTENT(IN) :: k
	REAL(8) b1, b2, b3, b4
	b1 = 1.781
	b2 = 1.424
	b3 = 0.354
	b4 = 0.938

	VQ = (b1 * ((b3 * dot_product(k,k)) - b2))/(4*(exp((b3 * dot_product(k,k)) - b4) + 1.0))
!removed 1/4
END FUNCTION VQ

COMPLEX(8) FUNCTION Struct(delG, ZLength, a0)
	IMPLICIT NONE
	REAL(8), DIMENSION(3), INTENT(IN) :: delG
	REAL(8), INTENT(IN) :: ZLength, a0	
	
	!This method of e^ix works
	COMPLEX(8) I
	REAL(8), DIMENSION(3) :: d, RNeg, RPos

	I = (0,1.0)
	d(1) = 0.0
	d(2) = a0
	d(3) = 0

	RNeg(1) = -d(1)
	RNeg(2) = -d(2)
	RNeg(3) = -d(3) + ZLength/2

	RPos(1) = d(1)
	RPos(2) = d(2)
	RPos(3) = d(3) + ZLength/2
	
	Struct = exp(I * dot_product(delG, RNeg)) + exp(I * dot_product(delG, RPos))
	!structure factor
	
END FUNCTION Struct


! quicksort.f -*-f90-*-
! Author: t-nissie
! License: GPLv3
! Gist: https://gist.github.com/t-nissie/479f0f16966925fa29ea
!!
recursive subroutine quicksort(a, first, last)
  implicit none
  real*8  a(*), x, t
  integer first, last
  integer i, j

  x = a( (first+last) / 2 )
  i = first
  j = last
  do
     do while (a(i) < x)
        i=i+1
     end do
     do while (x < a(j))
        j=j-1
     end do
     if (i >= j) exit
     t = a(i);  a(i) = a(j);  a(j) = t
     i=i+1
     j=j-1
  end do
  if (first < i-1) call quicksort(a, first, i-1)
  if (j+1 < last)  call quicksort(a, j+1, last)
end subroutine quicksort


!Subroutines for finding Eigenvalues
SUBROUTINE TQL2(NM,N,D,E,Z,IER)
!-------------------------------------------------------------------------
!     QL METHOD TO DETERMINE THE EIGENVALUES AND EIGENVECTORS OF:
!
!       1)  A SYMMETRIC TRIDIAGONAL MATRIX.
!       2)  A FULL SYMMETRIC MATRIX AFTER A PREVIOUS CALL TO TRED2.
!
!     CALLING MODE:
!               CALL TQL2(NM,N,D,E,Z,IER)
!     INPUTSS:
!     NM  (I4)  1ST DIMENSION OF MATRICES A AND Z IN CALLING PROGRAM
!     N   (I4)  SIZE OF Z
!     D  (R*8)  MAIN DIAGONAL (N) OF THE TRIDIAGONAL MATRIX
!     E  (R*8)  SUB-DIAGONAL (N) OF THE TRIDIAGONAL MATRIX
!     Z  (R*8)  TABLE (NM,N) STORING THE UNITY MATRIX IF THE TRIDIAGONAL
!               MATRIX IS DEFINED BY D AND E, CASE #1.
!               FOR CASE #2, IT CONTAINS THE ELEMENTS OF THE TRANSFORMATION
!               MATRIX AFTER A CALL TO TRED2.
!     OUTPUTS:
!     D  (R*8)  EIGENVALUES
!     Z  (R*8)  EIGENVECTORS
!     IER (I4)  ERROR CODE = 0,  CONVERGENCE OK.
!                          = L,  NO CONVERGENCE FOR THE Lth EIGENVALUE
!
!     REFERENCE:
!     J.H.WILKINSON,-C.REINSCH,R.S.MARTIN
!     HANDBOOK FOR AUTOMATIC COMPUTATION, VOL.2, LINEAR ALGEBRA
!     SPRINGER-VERLAG 1971.
!-------------------------------------------------------------------------
      REAL *8 D(N),E(N),Z(NM,N),B,C,F,G,H,P,R,S,EPS,EPS1
      INTEGER I,J,K,L,M,N,NM,JM
      DATA EPS /0.D0/,JM /30/
      IER = 0
      IF (N.EQ.1) GO TO 38
!
!     MACHINE EPSILON
!
      IF (EPS.NE.0.D0) GO TO 12
      EPS = 1.D0
   10 EPS = EPS/2.D0
      EPS1 = 1.D0+EPS
      IF (EPS1.GT.1.D0) GO TO 10
!
   12 DO 14 I = 2,N
   14 E(I-1) = E(I)
      E(N) = 0.D0
      F = 0.D0
      B = 0.D0
!
      DO 28 L = 1,N
      J = 0
      H = EPS*(ABS(D(L))+ABS(E(L)))
      IF (B.LT.H) B = H
!
!     SEEK SMALLEST ELEMENT OF SUBDIAGONAL
!
      DO 16 M = L,N
      IF (ABS(E(M)).LE.B) GO TO 18
   16 CONTINUE
   18 IF (M.EQ.L) GO TO 26

!     START ITERATION

   20 IF (J.EQ.JM) GO TO 36
      J = J+1

!     SHIFT

      G = D(L)
      P = (D(L+1)-G)/(2.D0*E(L))
      R = SQRT(P*P+1.D0)
      D(L) = E(L)/(P+SIGN(R,P))
      H = G-D(L)
      DO 22 I = L+1,N
   22 D(I) = D(I)-H
      F = F+H

!     QL TRANSFORMATION

      P = D(M)
      C = 1.D0
      S = 0.D0
      DO 24 I = M-1,L,-1
      G = C*E(I)
      H = C*P
      IF (ABS(P).GE.ABS(E(I))) THEN
      C = E(I)/P
      R = SQRT(C*C+1.D0)
      E(I+1) = S*P*R
      S = C/R
      C = 1.D0/R
      ELSE
      C = P/E(I)
      R = SQRT(C*C+1.D0)
      E(I+1) = S*E(I)*R
      S = 1.D0/R
      C = C*S
      ENDIF
      P = C*D(I)-S*G
      D(I+1) = H+S*(C*G+S*D(I))

!     ELEMENTS OF EIGENVECTORS

      DO 24 K = 1,N
      H = Z(K,I+1)
      Z(K,I+1) = S*Z(K,I)+C*H
      Z(K,I) = Z(K,I)*C-S*H
   24 CONTINUE
      E(L) = S*P
      D(L) = C*P
      IF (ABS(E(L)).GT.B) GO TO 20

!     CONVERGENCE

   26 D(L) = D(L)+F
   28 CONTINUE

!     SORT EIGENVALUES AND EIGENVECTORS
!     IN ASVENDING ORDER

      DO 34 L = 2,N
      I = L-1
      K = I
      P = D(I)
      DO 30 J = L,N
      IF (D(J).GE.P) GO TO 30
      K = J
      P = D(J)
   30 CONTINUE
      IF (K.EQ.I) GO TO 34
      D(K) = D(I)
      D(I) = P
      DO 32 J = 1,N
      P = Z(J,I)
      Z(J,I) = Z(J,K)
   32 Z(J,K) = P
   34 CONTINUE
      GO TO 38

!     NO CONVERGENCE

   36 IER = L
   38 RETURN
      END

      SUBROUTINE TRED2(NM,N,A,D,E,Z)
!---------------------------------------------------------------------------
!     TRIDIAGONALIZATION OF A SYMMETRIC MATRIX BY ORTHOGONAL TRANSFORMATIONS
!     (ALGORITHM OF HOUSEHOLDER)
!     CALLING MODE:
!               CALL TRED2(NM,N,A,D,E,Z)
!     INPUTS:
!     NM  (I4)  1ST DIMENSION OF MATRICES A AND Z IN CALLING PROGRAM
!     N   (I4)  SIZE OF A
!     A  (R*8)  TABLE(NM,N) STORING THE COEFFICIENTS OF SYMMETRIC A MATRIX
!               (LOWER HALF), A IS NOT DESTROYED DURING THE PROCESS
!               IF Z MATRIX HAS NOT THE SAME ADDRESS.
!     OUTPUTS:
!     D  (R*8)  MAIN DIAGONAL (N) OF REDUCED TRIDIAGONAL MATRIX
!     E  (R*8)  SUB-DIAGONAL (N) OF REDUCED TRIDIAGONAL MATRIX
!     Z  (R*8)  TABLE (NM,N) STORING THE ELEMENTS OF THE ORTHOGONAL 
!               TRANSFORMATION MATRIX.
!     REFERENCE:
!     J.H.WILKINSON,-C.REINSCH,R.S.MARTIN
!     HANDBOOK FOR AUTOMATIC COMPUTATION, VOL.2, LINEAR ALGEBRA
!     SPRINGER-VERLAG 1971.
!-----------------------------------------------------------------------
      INTEGER I,J,K,L,N,NM
      REAL *8 A(NM,N),D(N),E(N),Z(NM,N),F,G,H,HH,SCALE

!     LOWER HALF OF A PUT INTO Z

      DO 10 I = 1,N
      DO 10 J = 1,I
   10 Z(I,J) = A(I,J)
      IF (N.EQ.1) GO TO 32

!     N-2 STAGE OF TRANSFORMATION

      DO 30 I = N,2,-1
      L = I-1
      H = 0.

!     CONDITIONNING BY NORM OF A

      SCALE = 0.
      IF (L.LT.2) GO TO 14
      DO 12 K = 1,L
   12 SCALE = SCALE+ABS(Z(I,K))
      IF (SCALE.NE.0.) GO TO 16

   14 E(I) = Z(I,L)
      GO TO 28

   16 DO 18 K = 1,L
      Z(I,K) = Z(I,K)/SCALE
      H = H+Z(I,K)*Z(I,K)
   18 CONTINUE

      F = Z(I,L)
      G = -SIGN(SQRT(H),F)
      E(I) = SCALE*G
      H = H-F*G
      Z(I,L) = F-G
      F = 0.
      DO 24 J = 1,L
      Z(J,I) = Z(I,J)/H
      G = 0.

!     ELEMENT OF A*U
      DO 20 K = 1,J
   20 G = G+Z(J,K)*Z(I,K)
      IF (L.GE.J+1) THEN
      DO 22 K = J+1,L
   22 G = G+Z(K,J)*Z(I,K)

!     ELEMENT OF P = A*U/H

      END IF
      E(J) = G/H
      F = F+E(J)*Z(I,J)
   24 CONTINUE

!     ELEMENT OF K

      HH = F/(H+H)

!     REDUCED FORM OF A

      DO 26 J = 1,L
      F = Z(I,J)
      G = E(J)-HH*F
      E(J) = G
      DO 26 K = 1,J
      Z(J,K) = Z(J,K)-F*E(K)-G*Z(I,K)
   26 CONTINUE
!
   28 D(I) = H
   30 CONTINUE

!     END OF TRANSFORMATION

   32 D(1) = 0.
      E(1) = 0.

!     ACCUMULATE TRANSFORMATION MATRICES IN Z

      DO 40 I = 1,N
      L = I-1
      IF (D(I).NE.0.) THEN
      DO 36 J = 1,L
      G = 0.
      DO 34 K = 1,L
   34 G = G+Z(I,K)*Z(K,J)
      DO 36 K = 1,L
      Z(K,J) = Z(K,J)-G*Z(K,I)
   36 CONTINUE
      END IF
      D(I) = Z(I,I)
      Z(I,I) = 1.
      IF (L.LT.1) GO TO 40
      DO 38 J = 1,L
      Z(I,J) = 0.
      Z(J,I) = 0.
   38 CONTINUE
   40 CONTINUE

      RETURN
      END
